{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"SOM/","text":"SOM Programaci\u00f3n estructurada en PowerShell El primer paso que debemos realizar en nuestra m\u00e1quina virtual de W10, es la ejecuci\u00f3n del siguiente comando (en una ventana de powershell con permisos de administrador): Set-ExecutionPolicy Unrestricted Declaraci\u00f3n de variables $variable = valor Por ejemplo: #System.Int32 $entero = 3 #System.String $cadenaDeCaracteres = \"Hola\" Entrada y salida Para poder mostrar por pantalla el valor de una variable o de una operaci\u00f3n utilizaremos la funci\u00f3n: Write-Host $variable Write-Host ( $operando1 + $operando2 ) Para poder recibir valores por teclado (y asignarlos a una variable), utilizaremos la funci\u00f3n: $variable = Read-Host \"Mensaje\" Por ejemplo: [int] $edad = Read-Host \"Por favor, introduzca su edad\" Tip La funci\u00f3n Read-Host devuelve siempre una variable cadena de texto. Si queremos almacenar en nuestra variable un n\u00famero entero tendremos que declararlo de forma expl\u00edcita utilizando [int] Argumentos de llamada a un script .ps1 Podemos pasarle a nuestro script los valores que queramos como argumentos: ./ script . ps1 1 2 3 Dentro de nuestro script, podremos recuperar estos valores de la siguiente manera: $primerNumero = $args [ 0 ] $segundoNumero = $args [ 1 ] $tercerNumero = $args [ 2 ] Operadores de comparaci\u00f3n Estos operadores los utilizaremos tanto en las sentencias condicionales como en los bucles: -eq (equal to):igual a -lt (less than): menos que -gt (greater than): m\u00e1s que -ge (greater than or equal to): mayor o igual a -le (less than or equal to): menor o igual a -ne (not equal to): no es igual a Operaciones l\u00f3gicas -and Permite relacionar varios predicados condicionales. Para que el predicado global sea verdadero, tienen que ser verdaderos todos los predicados relacionados. if ( ( $num1 -gt 5 ) -and ( $num2 -gt 5 ) ) { Write-Host \"Los dos n\u00fameros son mayores que 5\" } -or Permite relacionar varios predicados condicionales. Para que el predicado global sea verdadero, tiene que ser verdadero, al menos uno de los predicados relacionados. if ( ( $num1 -gt 5 ) -or ( $num2 -gt 5 ) ) { Write-Host \"Al menos uno de los dos n\u00fameros son mayores que 5\" } -not Permite negar predicados condicionales. if ( -not ( $num -gt 5 ) ) { Write-Host \"El n\u00famero no es mayor que 5\" } Sentencias condicionales IF $a = 5 if ( $a -eq 5 ) { Write-Host \"5\" } IF-ELSE $a = 5 if ( $a -eq 5 ) { Write-Host \"La variable a tiene asignado el valor 5\" } else { Write-Host \"La variable a no tiene asignado el valor 5\" } ELSEIF $a = 6 if ( $a -eq 5 ) { Write-Host \"La variable a tiene asignado el valor 5\" } elseif ( $a -eq 6 ) { Write-Host \"La variable a tiene asignado el valor 6\" } else { Write-Host \"La variable a no tiene asignado ni el valor 5 ni el 6\" } SWITCH $a = 5 switch ( $a ) { 5 { Write-Host \"La variable a tiene asignado el valor 5\" break } 6 { Write-Host \"La variable a tiene asignado el valor 6\" break } 7 { Write-Host \"La variable a tiene asignado el valor 7\" break } default { Write-Host \"La variable a no tiene asignado ni el valor 5 ni el 6 ni el 7\" } } Bucles (Sentencias de repetici\u00f3n) WHILE $i = 1 while ( $i -le 10 ) { $i $i ++ } DO-WHILE $i = 1 do { $i $i ++ } while ( $i -le 10 ) FOR for ( $i = 1 ; $i -le 10 ; $i ++) { $i } FOREACH foreach ( $i in 1 .. 10 ) { $i } Funci\u00f3n random La funci\u00f3n Get-Random nos permite obtener valores aleatorios. #Obtener un n\u00famero aleatorio entre 0 y 100 Get-Random -Minimum 0 -Maximum 100 #Obtener dos colores aleatorios de la lista 'verde' , 'amarillo' , 'rojo' , 'azul' , 'negro' , 'blanco' | Get-Random -Count 2 #Reorganiza de forma aleatoria toda la lista de colores 'verde' , 'amarillo' , 'rojo' , 'azul' , 'negro' , 'blanco' | Get-Random -Shuffle Funciones de cadenas de caracteres Length Muestra la longitud de una cadena de caracteres $c = 'casa' $c . length 4 IndexOf Muestra la posici\u00f3n de la primera ocurrencia de un car\u00e1cter dentro de una cadena de texto. En caso de que el car\u00e1cter no est\u00e9 dentro de la cadena de texto devuelve -1. $c = 'casa' $c . indexOf ( 'c' ) 0 $c . indexOf ( 's' ) 2 $c . indexOf ( 'w' ) - 1 Replace Reemplaza una secci\u00f3n de una cadena de caracteres por otra. $c = 'casa' $c . replace ( 'ca' , 'pa' ) pasa Insert Introduce en una posici\u00f3n de una cadena de texto, otra cadena de texto. $c = 'casa' $c . insert ( 4 . 's' ) casas Equals Eval\u00faa si una cadena de caracteres es igual a otra. Devuelve los valores booleanos True o False. $c = 'casa' $c1 = 'casa' $c2 = 'pasa' $c . equals ( 'casa' ) True $c . equals ( 'pasa' ) False $c . equals ( $c2 ) False $c . equals ( $c1 ) True Split y Substring Lo veremos en pr\u00f3ximos cap\u00edtulos. Ejercicios resueltos Contador de 1 a 10 utilizando el bucle WHILE $i = 1 while ( $i -le 10 ) { Write-Host ( $i ) $i ++ } Sensor de temperatura con ELSEIF [int] $temp = Read-Host \"Por favor, introduzca la temperatura\" if ( $temp -le 10 ) { Write-Host \"Fr\u00edo\" } elseif ( $temp -gt 10 -and $temp -le 18 ) { Write-Host \"Fresquito\" } elseif ( $temp -gt 18 -and $temp -le 24 ) { Write-Host \"Temperatura agradable\" } else { Write-Host \"Calor\" } Sem\u00e1foro con SWITCH $color = $args [ 0 ] switch ( $color ) { 'verde' { Write-Host \"Pasar\" break } 'amarillo' { Write-Host \"Precauci\u00f3n\" break } 'rojo' { Write-Host \"Parar\" break } default { Write-Host \"Color inv\u00e1lido\" } } Recorrer una lista utilizando el bucle FOR $frutas = 'fresa' , 'manzana' , 'platano' , 'melon' , 'naranja' , 'limon' for ( $i = 0 ; $i -lt $frutas . length ; $i ++) { Write-Host $frutas [ $i ] } Obtener N elementos de una lista de manera aleatoria $frutas = 'fresa' , 'manzana' , 'platano' , 'melon' , 'naranja' , 'limon' [int] $numFrutas = Read-Host \"\u00bfCu\u00e1ntas frutas quiere?\" $frutas | Get-Random -Count $numFrutas Comprobar si una letra est\u00e1 presente en una palabra $palabra = 'casa' $letra = Read-Host \"Por favor, introduzca una letra\" if ( $palabra . IndexOf ( $letra ) -ne - 1 ) { Write-Host \"La letra est\u00e1 presente en la palabra\" } else { Write-Host \"La letra NO est\u00e1 presente en la palabra\" } Eliminar de una lista las palabras que comienzan por vocal $alumnos = 'Iker' , 'Desir\u00e9e' , 'Andrei' , 'Pablo' , 'Aitor' , 'Manuel' , 'Mario' , 'Daniel' , 'Edwar' , 'Nicol\u00e1s' for ( $i = 0 ; $i -lt $alumnos . length ; $i ++) { $alumno = $alumnos [ $i ] $pl = $alumno [ 0 ] if ( $pl -eq 'a' -or $pl -eq 'e' -or $pl -eq 'i' -or $pl -eq 'o' -or $pl -eq 'u' ) { $alumnos [ $i ] = '----' } } $alumnos Mostrar los personajes cuyo nombre y apellido comienzan por la misma letra $personajes = 'Peter Parker' , 'Hercule Poirot' , 'Stephen Strange' , 'Harry Potter' , 'Reed Richards' , 'Matt Murdock' , 'Oliver Twist' $personaje = '' $espacio = - 1 $primeraLetraNombre = '' for ( $i = 0 ; $i -lt $personajes . length ; $i ++) { $personaje = $personajes [ $i ] $primeraLetraNombre = $personaje [ 0 ] for ( $j = 0 ; $j -lt $personaje . length ; $j ++) { if ( $personaje [ $j ] -eq ' ' ) { $espacio = $j } } if ( $primeraLetraNombre -eq $personaje [ $espacio + 1 ]) { Write-Host $personaje } } Examen 07/03/2022 Pregunta 1 - Escribe un script que reciba 3 argumentos (utiliza $args): Le preguntar\u00e1 al usuari@ su nombre y apellidos y se lo mostrar\u00e1 por pantalla con el siguiente formato: apellido1 apellido2, nombre Write-Host $args [ 1 ] $args [ 2 ] ',' $args [ 0 ] (Alternativa) Utilizando Read-Host y 3 variables $nombre = Read-Host \"Introduzca su nombre\" $apell1 = Read-Host \"Introduzca 1er apellido\" $apell2 = Read-Host \"Introduzca 2\u00ba apellido\" Write-Host $apell1 $apell2 ', ' $nombre Pregunta 2 - Escribe un script que genere un n\u00famero aleatorio entre 0 y 50. Si el n\u00famero resultante es 10 20 30 o 40 escribe \u201c\u00a1Has tenido suerte!\u201d $num = Get-Random -Minimum 0 -Maximum 50 if ( $num -eq 10 -or $num -eq 20 -or $num -eq 30 -or $num -eq 40 ) { Write-Host \"Has tenido suerte\" } Pregunta 3 - Escribe un script calculadora en el que declares 2 variables (ser\u00e1n los operandos) y admita un argumento para seleccionar el tipo de operaci\u00f3n a realizar mediante la estructura switch. El/la usuari@ puede elegir entre la operaci\u00f3n de suma y la de multiplicaci\u00f3n. $op1 = 2 $op2 = 3 $op = $args [ 0 ] switch ( $op ) { + { Write-Host ( $op1 + $op2 ) break } * { Write-Host ( $op1 * $op2 ) break } } Pregunta 4 - Escribe un script que muestre los n\u00fameros del 15 al 1(orden descendente) mediante un bucle. for ( $i = 15 ; $i -gt 0 ; $i --) { Write-Host $i } Pregunta 5 - Script que muestre \u00fanicamente las palabras en plural (terminan por la letra s) de la siguiente lista: casa, aceitunas, verdura, futbolista, pilas, cosas $lista = 'casa' , 'aceitunas' , 'verdura' , 'futbolista' , 'pilas' , 'cosas' for ( $i = 0 ; $i -lt $lista . length ; $i ++) { $palabra = $lista [ $i ] if ( $palabra [ $palabra . length - 1 ] -eq 's' ) { Write-Host $palabra } } Ejercicios repaso recuperaci\u00f3n 21/03/2022 1. Script que pinte todos los argumentos mediante un bucle con la siguiente salida: Argumento 1 - valorArgumento1 Argumento 2 - valorArgumento2 Argumento 3 - valorArgumento3 Argumento N - valorArgumentoN 2. Crea una lista con las letras del abecedario: En una primera versi\u00f3n: Muestra la primera, la quinta y la octava letra. En una segunda versi\u00f3n: Preg\u00fantale al usuari@ cuantas letras aleatorias quiere obtener. Si alguna de las letras obtenidas es una vocal, muestra el siguiente mensaje: Has tenido suerte! 3. Crea un script que convierta una nota num\u00e9rica a formato texto: Si la nota es menor que 5 - Escribe suspenso Si la nota es mayor o igual a 5 y menor que 6 - Escribe aprobado Si la nota es mayor o igual a 6 y menor que 7 - Escribe bien Si la nota es mayor o igual a 7 y menor que 9 - Escribe notable Si la nota es mayor o igual a 9 y menor que 10 - Escribe sobresaliente Si la nota es igual a 10 - Escribe Matr\u00edcula de honor Si la nota est\u00e1 fuera de estos rangos - Escribe valor inv\u00e1lido 4. Crea un script que contenga un bucle que muestre los n\u00fameros impares del 1 al 19 Comandos Powershell New-Item Nos permite crear ficheros -ItemType \"file\" y carpetas -ItemType \"directory\" especificando la ruta del nuevo elemento mediante -Path. Ejemplos Remove-Item Permite eliminar ficheros y carpetas. Ejemplos Copy-Item Permite copiar ficheros y carpetas en nuestro sistema de archivos. Ejemplos Move-Item Permite mover ficheros y carpetas en nuestro sistema de archivos. Ejemplos Compress-Archive Nos permite comprimir archivos y carpetas. Ejemplos Expand-Archive Nos permite descomprimir archivos .zip. Ejemplo Add-Content Nos permite a\u00f1adir texto -Value a un fichero -Path . Ejemplos Get-Content Permite visualizar el contenido de un fichero de texto. Ejemplos Clear-Content Permite eliminar el contenido de un fichero de texto. Ejemplos Get-Date Muestra la fecha actual en distintos formatos Ejemplos Ejercicio resuelto Crea la carpeta ejercicioRepaso en el escritorio con el siguiente contenido: uno.txt dos.html tres.txt cuatro.html New-Item -Path C :\\ Users \\ usuario \\ Desktop \\ ejercicioRepaso -ItemType \"directory\" New-Item -Path C :\\ Users \\ usuario \\ Desktop \\ ejercicioRepaso \\ uno . txt -ItemType \"file\" New-Item -Path C :\\ Users \\ usuario \\ Desktop \\ ejercicioRepaso \\ dos . html -ItemType \"file\" New-Item -Path C :\\ Users \\ usuario \\ Desktop \\ ejercicioRepaso \\ tres . txt -ItemType \"file\" New-Item -Path C :\\ Users \\ usuario \\ Desktop \\ ejercicioRepaso \\ cuatro . html -ItemType \"file\" Crea una carpeta en Documentos llamada web y copia los archivos .html de ejercicioRepaso a esta nueva carpeta: New-Item -Path C :\\ Users \\ usuario \\ Documents \\ web -ItemType \"directory\" Copy-Item -Path C :\\ Users \\ usuario \\ Desktop \\ ejercicioRepaso \\*. html -Destination C :\\ Users \\ usuario \\ Documents \\ web Comprime la carpeta web en Documentos: Compress-Archive -Path C :\\ Users \\ usuario \\ Documents \\ web \\* -DestinationPath C :\\ Users \\ usuario \\ Documents \\ web . zip Mueve la carpeta web.zip de Documentos a Escritorio: Move-Item -Path C :\\ Users \\ usuario \\ Documents \\ web . zip -Destination C :\\ Users \\ usuario \\ Desktop Elimina la carpeta web (y todo su contenido) de Documentos: Remove-Item C :\\ Users \\ usuario \\ Documents \\ web -Recurse Descomprime web.zip (en el Escritorio): Expand-Archive -Path C :\\ Users \\ usuario \\ Desktop \\ web . zip -DestinationPath C :\\ Users \\ usuario \\ Desktop \\ web Ejemplo de men\u00fa simple en PowerShell [int] $opcion = - 1 while ( $opcion -ne 4 ) { Write-Host \"1. Opci\u00f3n 1\" Write-Host \"2. Opci\u00f3n 2\" Write-Host \"3. Opci\u00f3n 3\" Write-Host \"4. Salir\" $opcion = Read-Host \"Seleccione una opci\u00f3n\" switch ( $opcion ) { 1 { Write-Host \"Seleccionaste la opcion 1\" } 2 { Write-Host \"Seleccionaste la opcion 2\" } 3 { Write-Host \"Seleccionaste la opcion 3\" } 4 { Write-Host \"Saliendo del script...\" } } } Creaci\u00f3n de una cuenta de usuario en W10 Paso 1: Paso 2: Paso 3: Paso 4: Paso 5: Compartir una carpeta en W10 Paso 1: Click derecho rat\u00f3n encima de la carpeta a compartir -> Propiedades Paso 2: 1. Seleccionamos el usuario con el que queremos compartir la carpeta. 2. Clickamos en el bot\u00f3n agregar. 3. Clickamos en el bot\u00f3n compartir. Ubuntu Creaci\u00f3n de una carpeta mkdir nombreCarpeta Creaci\u00f3n de un documento touch nombreDocumento Eliminaci\u00f3n de un documento/carpeta rm nombreDocumento En caso de querer utilizar este comando con una carpeta, debemos incluir el argumento -R Copiar documento/carpeta cp rutaOrigen rutaDestino Mover documento/carpeta mv rutaOrigen rutaDestino Comprimir archivos/carpetas tar czf rutaDestino.tar.gz rutaOrigen/* Descomprimir archivos con extensi\u00f3n .tar.gz en el directorio actual tar xf rutaFicheroComprimido Descomprimir archivos con extensi\u00f3n .tar.gz en una ruta determinada tar xfC rutaFicheroComprimido rutaDestino Creaci\u00f3n de un grupo en Linux sudo groupadd nombreGrupo Podemos consultar los grupos existentes en nuestra sistema en /etc/group Creaci\u00f3n de un usuario en Linux sudo useradd -m nombreUsuario -G nombreGrupo -s /bin/bash Par\u00e1metros opcionales: -m crea una carpeta home para el nuevo usuario en /home/nombreUsuario -G a\u00f1ade al usuario reci\u00e9n creado a un grupo que exista en el sistema -s Estable la terminal por defecto del usuario Podemos consultar los usuarios existentes en nuestra sistema en /etc/passwd Establecer la contrase\u00f1a sudo passwd nombreUsuario A\u00f1adir un usuario a un grupo sudo usermod -aG nombreGrupo nombreusuario Listar los permisos de los archivos/carpetas contenidos en el directorio actual ls -l Establecer los permisos de un archivo/carpeta sudo chmod NNN nombreArchivo/nombreCarpeta Explicaci\u00f3n + Ejemplos En caso de querer utilizar este comando con una carpeta, debemos incluir el argumento -R Establecer el usuario propietario de un archivo/carpeta sudo chown nombreUsuario nombreArchivo/nombreCarpeta En caso de querer utilizar este comando con una carpeta, debemos incluir el argumento -R Establecer el grupo propietario de un archivo/carpeta sudo chgrp nombreGrupo nombreArchivo/nombreCarpeta En caso de querer utilizar este comando con una carpeta, debemos incluir el argumento -R Programador de tareas de Linux Explicaci\u00f3n + Ejemplos Esto es una prueba de Actions","title":"SOM"},{"location":"SOM/#som","text":"","title":"SOM"},{"location":"SOM/#programacion-estructurada-en-powershell","text":"El primer paso que debemos realizar en nuestra m\u00e1quina virtual de W10, es la ejecuci\u00f3n del siguiente comando (en una ventana de powershell con permisos de administrador): Set-ExecutionPolicy Unrestricted","title":"Programaci\u00f3n estructurada en PowerShell"},{"location":"SOM/#declaracion-de-variables","text":"$variable = valor Por ejemplo: #System.Int32 $entero = 3 #System.String $cadenaDeCaracteres = \"Hola\"","title":"Declaraci\u00f3n de variables"},{"location":"SOM/#entrada-y-salida","text":"Para poder mostrar por pantalla el valor de una variable o de una operaci\u00f3n utilizaremos la funci\u00f3n: Write-Host $variable Write-Host ( $operando1 + $operando2 ) Para poder recibir valores por teclado (y asignarlos a una variable), utilizaremos la funci\u00f3n: $variable = Read-Host \"Mensaje\" Por ejemplo: [int] $edad = Read-Host \"Por favor, introduzca su edad\" Tip La funci\u00f3n Read-Host devuelve siempre una variable cadena de texto. Si queremos almacenar en nuestra variable un n\u00famero entero tendremos que declararlo de forma expl\u00edcita utilizando [int]","title":"Entrada y salida"},{"location":"SOM/#argumentos-de-llamada-a-un-script-ps1","text":"Podemos pasarle a nuestro script los valores que queramos como argumentos: ./ script . ps1 1 2 3 Dentro de nuestro script, podremos recuperar estos valores de la siguiente manera: $primerNumero = $args [ 0 ] $segundoNumero = $args [ 1 ] $tercerNumero = $args [ 2 ]","title":"Argumentos de llamada a un script .ps1"},{"location":"SOM/#operadores-de-comparacion","text":"Estos operadores los utilizaremos tanto en las sentencias condicionales como en los bucles: -eq (equal to):igual a -lt (less than): menos que -gt (greater than): m\u00e1s que -ge (greater than or equal to): mayor o igual a -le (less than or equal to): menor o igual a -ne (not equal to): no es igual a","title":"Operadores de comparaci\u00f3n"},{"location":"SOM/#operaciones-logicas","text":"-and Permite relacionar varios predicados condicionales. Para que el predicado global sea verdadero, tienen que ser verdaderos todos los predicados relacionados. if ( ( $num1 -gt 5 ) -and ( $num2 -gt 5 ) ) { Write-Host \"Los dos n\u00fameros son mayores que 5\" } -or Permite relacionar varios predicados condicionales. Para que el predicado global sea verdadero, tiene que ser verdadero, al menos uno de los predicados relacionados. if ( ( $num1 -gt 5 ) -or ( $num2 -gt 5 ) ) { Write-Host \"Al menos uno de los dos n\u00fameros son mayores que 5\" } -not Permite negar predicados condicionales. if ( -not ( $num -gt 5 ) ) { Write-Host \"El n\u00famero no es mayor que 5\" }","title":"Operaciones l\u00f3gicas"},{"location":"SOM/#sentencias-condicionales","text":"","title":"Sentencias condicionales"},{"location":"SOM/#if","text":"$a = 5 if ( $a -eq 5 ) { Write-Host \"5\" }","title":"IF"},{"location":"SOM/#if-else","text":"$a = 5 if ( $a -eq 5 ) { Write-Host \"La variable a tiene asignado el valor 5\" } else { Write-Host \"La variable a no tiene asignado el valor 5\" }","title":"IF-ELSE"},{"location":"SOM/#elseif","text":"$a = 6 if ( $a -eq 5 ) { Write-Host \"La variable a tiene asignado el valor 5\" } elseif ( $a -eq 6 ) { Write-Host \"La variable a tiene asignado el valor 6\" } else { Write-Host \"La variable a no tiene asignado ni el valor 5 ni el 6\" }","title":"ELSEIF"},{"location":"SOM/#switch","text":"$a = 5 switch ( $a ) { 5 { Write-Host \"La variable a tiene asignado el valor 5\" break } 6 { Write-Host \"La variable a tiene asignado el valor 6\" break } 7 { Write-Host \"La variable a tiene asignado el valor 7\" break } default { Write-Host \"La variable a no tiene asignado ni el valor 5 ni el 6 ni el 7\" } }","title":"SWITCH"},{"location":"SOM/#bucles-sentencias-de-repeticion","text":"","title":"Bucles (Sentencias de repetici\u00f3n)"},{"location":"SOM/#while","text":"$i = 1 while ( $i -le 10 ) { $i $i ++ }","title":"WHILE"},{"location":"SOM/#do-while","text":"$i = 1 do { $i $i ++ } while ( $i -le 10 )","title":"DO-WHILE"},{"location":"SOM/#for","text":"for ( $i = 1 ; $i -le 10 ; $i ++) { $i }","title":"FOR"},{"location":"SOM/#foreach","text":"foreach ( $i in 1 .. 10 ) { $i }","title":"FOREACH"},{"location":"SOM/#funcion-random","text":"La funci\u00f3n Get-Random nos permite obtener valores aleatorios. #Obtener un n\u00famero aleatorio entre 0 y 100 Get-Random -Minimum 0 -Maximum 100 #Obtener dos colores aleatorios de la lista 'verde' , 'amarillo' , 'rojo' , 'azul' , 'negro' , 'blanco' | Get-Random -Count 2 #Reorganiza de forma aleatoria toda la lista de colores 'verde' , 'amarillo' , 'rojo' , 'azul' , 'negro' , 'blanco' | Get-Random -Shuffle","title":"Funci\u00f3n random"},{"location":"SOM/#funciones-de-cadenas-de-caracteres","text":"","title":"Funciones de cadenas de caracteres"},{"location":"SOM/#length","text":"Muestra la longitud de una cadena de caracteres $c = 'casa' $c . length 4","title":"Length"},{"location":"SOM/#indexof","text":"Muestra la posici\u00f3n de la primera ocurrencia de un car\u00e1cter dentro de una cadena de texto. En caso de que el car\u00e1cter no est\u00e9 dentro de la cadena de texto devuelve -1. $c = 'casa' $c . indexOf ( 'c' ) 0 $c . indexOf ( 's' ) 2 $c . indexOf ( 'w' ) - 1","title":"IndexOf"},{"location":"SOM/#replace","text":"Reemplaza una secci\u00f3n de una cadena de caracteres por otra. $c = 'casa' $c . replace ( 'ca' , 'pa' ) pasa","title":"Replace"},{"location":"SOM/#insert","text":"Introduce en una posici\u00f3n de una cadena de texto, otra cadena de texto. $c = 'casa' $c . insert ( 4 . 's' ) casas","title":"Insert"},{"location":"SOM/#equals","text":"Eval\u00faa si una cadena de caracteres es igual a otra. Devuelve los valores booleanos True o False. $c = 'casa' $c1 = 'casa' $c2 = 'pasa' $c . equals ( 'casa' ) True $c . equals ( 'pasa' ) False $c . equals ( $c2 ) False $c . equals ( $c1 ) True","title":"Equals"},{"location":"SOM/#split-y-substring","text":"Lo veremos en pr\u00f3ximos cap\u00edtulos.","title":"Split y Substring"},{"location":"SOM/#ejercicios-resueltos","text":"","title":"Ejercicios resueltos"},{"location":"SOM/#contador-de-1-a-10-utilizando-el-bucle-while","text":"$i = 1 while ( $i -le 10 ) { Write-Host ( $i ) $i ++ }","title":"Contador de 1 a 10 utilizando el bucle WHILE"},{"location":"SOM/#sensor-de-temperatura-con-elseif","text":"[int] $temp = Read-Host \"Por favor, introduzca la temperatura\" if ( $temp -le 10 ) { Write-Host \"Fr\u00edo\" } elseif ( $temp -gt 10 -and $temp -le 18 ) { Write-Host \"Fresquito\" } elseif ( $temp -gt 18 -and $temp -le 24 ) { Write-Host \"Temperatura agradable\" } else { Write-Host \"Calor\" }","title":"Sensor de temperatura con ELSEIF"},{"location":"SOM/#semaforo-con-switch","text":"$color = $args [ 0 ] switch ( $color ) { 'verde' { Write-Host \"Pasar\" break } 'amarillo' { Write-Host \"Precauci\u00f3n\" break } 'rojo' { Write-Host \"Parar\" break } default { Write-Host \"Color inv\u00e1lido\" } }","title":"Sem\u00e1foro con SWITCH"},{"location":"SOM/#recorrer-una-lista-utilizando-el-bucle-for","text":"$frutas = 'fresa' , 'manzana' , 'platano' , 'melon' , 'naranja' , 'limon' for ( $i = 0 ; $i -lt $frutas . length ; $i ++) { Write-Host $frutas [ $i ] }","title":"Recorrer una lista utilizando el bucle FOR"},{"location":"SOM/#obtener-n-elementos-de-una-lista-de-manera-aleatoria","text":"$frutas = 'fresa' , 'manzana' , 'platano' , 'melon' , 'naranja' , 'limon' [int] $numFrutas = Read-Host \"\u00bfCu\u00e1ntas frutas quiere?\" $frutas | Get-Random -Count $numFrutas","title":"Obtener N elementos de una lista de manera aleatoria"},{"location":"SOM/#comprobar-si-una-letra-esta-presente-en-una-palabra","text":"$palabra = 'casa' $letra = Read-Host \"Por favor, introduzca una letra\" if ( $palabra . IndexOf ( $letra ) -ne - 1 ) { Write-Host \"La letra est\u00e1 presente en la palabra\" } else { Write-Host \"La letra NO est\u00e1 presente en la palabra\" }","title":"Comprobar si una letra est\u00e1 presente en una palabra"},{"location":"SOM/#eliminar-de-una-lista-las-palabras-que-comienzan-por-vocal","text":"$alumnos = 'Iker' , 'Desir\u00e9e' , 'Andrei' , 'Pablo' , 'Aitor' , 'Manuel' , 'Mario' , 'Daniel' , 'Edwar' , 'Nicol\u00e1s' for ( $i = 0 ; $i -lt $alumnos . length ; $i ++) { $alumno = $alumnos [ $i ] $pl = $alumno [ 0 ] if ( $pl -eq 'a' -or $pl -eq 'e' -or $pl -eq 'i' -or $pl -eq 'o' -or $pl -eq 'u' ) { $alumnos [ $i ] = '----' } } $alumnos","title":"Eliminar de una lista las palabras que comienzan por vocal"},{"location":"SOM/#mostrar-los-personajes-cuyo-nombre-y-apellido-comienzan-por-la-misma-letra","text":"$personajes = 'Peter Parker' , 'Hercule Poirot' , 'Stephen Strange' , 'Harry Potter' , 'Reed Richards' , 'Matt Murdock' , 'Oliver Twist' $personaje = '' $espacio = - 1 $primeraLetraNombre = '' for ( $i = 0 ; $i -lt $personajes . length ; $i ++) { $personaje = $personajes [ $i ] $primeraLetraNombre = $personaje [ 0 ] for ( $j = 0 ; $j -lt $personaje . length ; $j ++) { if ( $personaje [ $j ] -eq ' ' ) { $espacio = $j } } if ( $primeraLetraNombre -eq $personaje [ $espacio + 1 ]) { Write-Host $personaje } }","title":"Mostrar los personajes cuyo nombre y apellido comienzan por la misma letra"},{"location":"SOM/#examen-07032022","text":"","title":"Examen 07/03/2022"},{"location":"SOM/#pregunta-1-escribe-un-script-que-reciba-3-argumentos-utiliza-args-le-preguntara-al-usuari-su-nombre-y-apellidos-y-se-lo-mostrara-por-pantalla-con-el-siguiente-formato-apellido1-apellido2-nombre","text":"Write-Host $args [ 1 ] $args [ 2 ] ',' $args [ 0 ] (Alternativa) Utilizando Read-Host y 3 variables $nombre = Read-Host \"Introduzca su nombre\" $apell1 = Read-Host \"Introduzca 1er apellido\" $apell2 = Read-Host \"Introduzca 2\u00ba apellido\" Write-Host $apell1 $apell2 ', ' $nombre","title":"Pregunta 1 - Escribe un script que reciba 3 argumentos (utiliza $args): Le preguntar\u00e1 al usuari@ su nombre y apellidos y se lo mostrar\u00e1 por pantalla con el siguiente formato: apellido1 apellido2, nombre"},{"location":"SOM/#pregunta-2-escribe-un-script-que-genere-un-numero-aleatorio-entre-0-y-50-si-el-numero-resultante-es-10-20-30-o-40-escribe-has-tenido-suerte","text":"$num = Get-Random -Minimum 0 -Maximum 50 if ( $num -eq 10 -or $num -eq 20 -or $num -eq 30 -or $num -eq 40 ) { Write-Host \"Has tenido suerte\" }","title":"Pregunta 2 - Escribe un script que genere un n\u00famero aleatorio entre 0 y 50. Si el n\u00famero resultante es 10 20 30 o 40 escribe \u201c\u00a1Has tenido suerte!\u201d"},{"location":"SOM/#pregunta-3-escribe-un-script-calculadora-en-el-que-declares-2-variables-seran-los-operandos-y-admita-un-argumento-para-seleccionar-el-tipo-de-operacion-a-realizar-mediante-la-estructura-switch-ella-usuari-puede-elegir-entre-la-operacion-de-suma-y-la-de-multiplicacion","text":"$op1 = 2 $op2 = 3 $op = $args [ 0 ] switch ( $op ) { + { Write-Host ( $op1 + $op2 ) break } * { Write-Host ( $op1 * $op2 ) break } }","title":"Pregunta 3 - Escribe un script calculadora en el que declares 2 variables (ser\u00e1n los operandos) y admita un argumento para seleccionar el tipo de operaci\u00f3n a realizar mediante la estructura switch. El/la usuari@ puede elegir entre la operaci\u00f3n de suma y la de multiplicaci\u00f3n."},{"location":"SOM/#pregunta-4-escribe-un-script-que-muestre-los-numeros-del-15-al-1orden-descendente-mediante-un-bucle","text":"for ( $i = 15 ; $i -gt 0 ; $i --) { Write-Host $i }","title":"Pregunta 4 - Escribe un script que muestre los n\u00fameros del 15 al 1(orden descendente) mediante un bucle."},{"location":"SOM/#pregunta-5-script-que-muestre-unicamente-las-palabras-en-plural-terminan-por-la-letra-s-de-la-siguiente-lista-casa-aceitunas-verdura-futbolista-pilas-cosas","text":"$lista = 'casa' , 'aceitunas' , 'verdura' , 'futbolista' , 'pilas' , 'cosas' for ( $i = 0 ; $i -lt $lista . length ; $i ++) { $palabra = $lista [ $i ] if ( $palabra [ $palabra . length - 1 ] -eq 's' ) { Write-Host $palabra } }","title":"Pregunta 5 - Script que muestre \u00fanicamente las palabras en plural (terminan por la letra s) de la siguiente lista: casa, aceitunas, verdura, futbolista, pilas, cosas"},{"location":"SOM/#ejercicios-repaso-recuperacion-21032022","text":"","title":"Ejercicios repaso recuperaci\u00f3n 21/03/2022"},{"location":"SOM/#1-script-que-pinte-todos-los-argumentos-mediante-un-bucle-con-la-siguiente-salida","text":"Argumento 1 - valorArgumento1 Argumento 2 - valorArgumento2 Argumento 3 - valorArgumento3 Argumento N - valorArgumentoN","title":"1. Script que pinte todos los argumentos mediante un bucle con la siguiente salida:"},{"location":"SOM/#2-crea-una-lista-con-las-letras-del-abecedario","text":"En una primera versi\u00f3n: Muestra la primera, la quinta y la octava letra. En una segunda versi\u00f3n: Preg\u00fantale al usuari@ cuantas letras aleatorias quiere obtener. Si alguna de las letras obtenidas es una vocal, muestra el siguiente mensaje: Has tenido suerte!","title":"2. Crea una lista con las letras del abecedario:"},{"location":"SOM/#3-crea-un-script-que-convierta-una-nota-numerica-a-formato-texto","text":"Si la nota es menor que 5 - Escribe suspenso Si la nota es mayor o igual a 5 y menor que 6 - Escribe aprobado Si la nota es mayor o igual a 6 y menor que 7 - Escribe bien Si la nota es mayor o igual a 7 y menor que 9 - Escribe notable Si la nota es mayor o igual a 9 y menor que 10 - Escribe sobresaliente Si la nota es igual a 10 - Escribe Matr\u00edcula de honor Si la nota est\u00e1 fuera de estos rangos - Escribe valor inv\u00e1lido","title":"3. Crea un script que convierta una nota num\u00e9rica a formato texto:"},{"location":"SOM/#4-crea-un-script-que-contenga-un-bucle-que-muestre-los-numeros-impares-del-1-al-19","text":"","title":"4. Crea un script que contenga un bucle que muestre los n\u00fameros impares del 1 al 19"},{"location":"SOM/#comandos-powershell","text":"","title":"Comandos Powershell"},{"location":"SOM/#new-item","text":"Nos permite crear ficheros -ItemType \"file\" y carpetas -ItemType \"directory\" especificando la ruta del nuevo elemento mediante -Path. Ejemplos","title":"New-Item"},{"location":"SOM/#remove-item","text":"Permite eliminar ficheros y carpetas. Ejemplos","title":"Remove-Item"},{"location":"SOM/#copy-item","text":"Permite copiar ficheros y carpetas en nuestro sistema de archivos. Ejemplos","title":"Copy-Item"},{"location":"SOM/#move-item","text":"Permite mover ficheros y carpetas en nuestro sistema de archivos. Ejemplos","title":"Move-Item"},{"location":"SOM/#compress-archive","text":"Nos permite comprimir archivos y carpetas. Ejemplos","title":"Compress-Archive"},{"location":"SOM/#expand-archive","text":"Nos permite descomprimir archivos .zip. Ejemplo","title":"Expand-Archive"},{"location":"SOM/#add-content","text":"Nos permite a\u00f1adir texto -Value a un fichero -Path . Ejemplos","title":"Add-Content"},{"location":"SOM/#get-content","text":"Permite visualizar el contenido de un fichero de texto. Ejemplos","title":"Get-Content"},{"location":"SOM/#clear-content","text":"Permite eliminar el contenido de un fichero de texto. Ejemplos","title":"Clear-Content"},{"location":"SOM/#get-date","text":"Muestra la fecha actual en distintos formatos Ejemplos","title":"Get-Date"},{"location":"SOM/#ejercicio-resuelto","text":"Crea la carpeta ejercicioRepaso en el escritorio con el siguiente contenido: uno.txt dos.html tres.txt cuatro.html New-Item -Path C :\\ Users \\ usuario \\ Desktop \\ ejercicioRepaso -ItemType \"directory\" New-Item -Path C :\\ Users \\ usuario \\ Desktop \\ ejercicioRepaso \\ uno . txt -ItemType \"file\" New-Item -Path C :\\ Users \\ usuario \\ Desktop \\ ejercicioRepaso \\ dos . html -ItemType \"file\" New-Item -Path C :\\ Users \\ usuario \\ Desktop \\ ejercicioRepaso \\ tres . txt -ItemType \"file\" New-Item -Path C :\\ Users \\ usuario \\ Desktop \\ ejercicioRepaso \\ cuatro . html -ItemType \"file\" Crea una carpeta en Documentos llamada web y copia los archivos .html de ejercicioRepaso a esta nueva carpeta: New-Item -Path C :\\ Users \\ usuario \\ Documents \\ web -ItemType \"directory\" Copy-Item -Path C :\\ Users \\ usuario \\ Desktop \\ ejercicioRepaso \\*. html -Destination C :\\ Users \\ usuario \\ Documents \\ web Comprime la carpeta web en Documentos: Compress-Archive -Path C :\\ Users \\ usuario \\ Documents \\ web \\* -DestinationPath C :\\ Users \\ usuario \\ Documents \\ web . zip Mueve la carpeta web.zip de Documentos a Escritorio: Move-Item -Path C :\\ Users \\ usuario \\ Documents \\ web . zip -Destination C :\\ Users \\ usuario \\ Desktop Elimina la carpeta web (y todo su contenido) de Documentos: Remove-Item C :\\ Users \\ usuario \\ Documents \\ web -Recurse Descomprime web.zip (en el Escritorio): Expand-Archive -Path C :\\ Users \\ usuario \\ Desktop \\ web . zip -DestinationPath C :\\ Users \\ usuario \\ Desktop \\ web","title":"Ejercicio resuelto"},{"location":"SOM/#ejemplo-de-menu-simple-en-powershell","text":"[int] $opcion = - 1 while ( $opcion -ne 4 ) { Write-Host \"1. Opci\u00f3n 1\" Write-Host \"2. Opci\u00f3n 2\" Write-Host \"3. Opci\u00f3n 3\" Write-Host \"4. Salir\" $opcion = Read-Host \"Seleccione una opci\u00f3n\" switch ( $opcion ) { 1 { Write-Host \"Seleccionaste la opcion 1\" } 2 { Write-Host \"Seleccionaste la opcion 2\" } 3 { Write-Host \"Seleccionaste la opcion 3\" } 4 { Write-Host \"Saliendo del script...\" } } }","title":"Ejemplo de men\u00fa simple en PowerShell"},{"location":"SOM/#creacion-de-una-cuenta-de-usuario-en-w10","text":"Paso 1: Paso 2: Paso 3: Paso 4: Paso 5:","title":"Creaci\u00f3n de una cuenta de usuario en W10"},{"location":"SOM/#compartir-una-carpeta-en-w10","text":"Paso 1: Click derecho rat\u00f3n encima de la carpeta a compartir -> Propiedades Paso 2: 1. Seleccionamos el usuario con el que queremos compartir la carpeta. 2. Clickamos en el bot\u00f3n agregar. 3. Clickamos en el bot\u00f3n compartir.","title":"Compartir una carpeta en W10"},{"location":"SOM/#ubuntu","text":"","title":"Ubuntu"},{"location":"SOM/#creacion-de-una-carpeta","text":"mkdir nombreCarpeta","title":"Creaci\u00f3n de una carpeta"},{"location":"SOM/#creacion-de-un-documento","text":"touch nombreDocumento","title":"Creaci\u00f3n de un documento"},{"location":"SOM/#eliminacion-de-un-documentocarpeta","text":"rm nombreDocumento En caso de querer utilizar este comando con una carpeta, debemos incluir el argumento -R","title":"Eliminaci\u00f3n de un documento/carpeta"},{"location":"SOM/#copiar-documentocarpeta","text":"cp rutaOrigen rutaDestino","title":"Copiar documento/carpeta"},{"location":"SOM/#mover-documentocarpeta","text":"mv rutaOrigen rutaDestino","title":"Mover documento/carpeta"},{"location":"SOM/#comprimir-archivoscarpetas","text":"tar czf rutaDestino.tar.gz rutaOrigen/*","title":"Comprimir archivos/carpetas"},{"location":"SOM/#descomprimir-archivos-con-extension-targz-en-el-directorio-actual","text":"tar xf rutaFicheroComprimido","title":"Descomprimir archivos con extensi\u00f3n .tar.gz en el directorio actual"},{"location":"SOM/#descomprimir-archivos-con-extension-targz-en-una-ruta-determinada","text":"tar xfC rutaFicheroComprimido rutaDestino","title":"Descomprimir archivos con extensi\u00f3n .tar.gz en una ruta determinada"},{"location":"SOM/#creacion-de-un-grupo-en-linux","text":"sudo groupadd nombreGrupo Podemos consultar los grupos existentes en nuestra sistema en /etc/group","title":"Creaci\u00f3n de un grupo en Linux"},{"location":"SOM/#creacion-de-un-usuario-en-linux","text":"sudo useradd -m nombreUsuario -G nombreGrupo -s /bin/bash Par\u00e1metros opcionales: -m crea una carpeta home para el nuevo usuario en /home/nombreUsuario -G a\u00f1ade al usuario reci\u00e9n creado a un grupo que exista en el sistema -s Estable la terminal por defecto del usuario Podemos consultar los usuarios existentes en nuestra sistema en /etc/passwd","title":"Creaci\u00f3n de un usuario en Linux"},{"location":"SOM/#establecer-la-contrasena","text":"sudo passwd nombreUsuario","title":"Establecer la contrase\u00f1a"},{"location":"SOM/#anadir-un-usuario-a-un-grupo","text":"sudo usermod -aG nombreGrupo nombreusuario","title":"A\u00f1adir un usuario a un grupo"},{"location":"SOM/#listar-los-permisos-de-los-archivoscarpetas-contenidos-en-el-directorio-actual","text":"ls -l","title":"Listar los permisos de los archivos/carpetas contenidos en el directorio actual"},{"location":"SOM/#establecer-los-permisos-de-un-archivocarpeta","text":"sudo chmod NNN nombreArchivo/nombreCarpeta Explicaci\u00f3n + Ejemplos En caso de querer utilizar este comando con una carpeta, debemos incluir el argumento -R","title":"Establecer los permisos de un archivo/carpeta"},{"location":"SOM/#establecer-el-usuario-propietario-de-un-archivocarpeta","text":"sudo chown nombreUsuario nombreArchivo/nombreCarpeta En caso de querer utilizar este comando con una carpeta, debemos incluir el argumento -R","title":"Establecer el usuario propietario de un archivo/carpeta"},{"location":"SOM/#establecer-el-grupo-propietario-de-un-archivocarpeta","text":"sudo chgrp nombreGrupo nombreArchivo/nombreCarpeta En caso de querer utilizar este comando con una carpeta, debemos incluir el argumento -R","title":"Establecer el grupo propietario de un archivo/carpeta"},{"location":"SOM/#programador-de-tareas-de-linux","text":"Explicaci\u00f3n + Ejemplos","title":"Programador de tareas de Linux"},{"location":"SOM/#esto-es-una-prueba-de-actions","text":"","title":"Esto es una prueba de Actions"}]}